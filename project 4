clear all;
clc;
tic
%% Task 1
M=3;
Mr = M;  % No of receive antennas
Mt = M;  % No of transmit antennas
N=100; %No of channel realisations
Hw=1/sqrt(2)*(randn(Mr,Mt,N)+1j*randn(Mr,Mt,N));

for i = 1:N
    fronorm(i) = norm(Hw(:,:,i),"fro").^2;
    H_norm(:,:,i) = Hw(:,:,i)./sqrt(fronorm(i)/(Mt*Mr));
end
Nbits = 5*10000;   % Number of bits
bits = round(rand(3,Nbits));     % bit generation
bits = bits.*2 - 1;   % BPSK modulation

for i = 1:M
    Sigpower(i,1) = (1/3).*sum(bits(i,:).^2)/length(bits(i,:));
end

SNRdb = 0:12;  % 0-12 dB SNR
SNR = 10.^(SNRdb./10);   % Linear SNR

No = Sigpower(1)./SNR;  % Noise variance 

for i = 1:length(No)
    noise_values(:,:) = randn(3,Nbits).*sqrt(No(i));
    for iii = 1:N 
        [U S V] = svd(H_norm(:,:,iii));
        for ii = 1:Nbits            
            y(:,ii) = (1/sqrt(Mt)).*(H_norm(:,:,iii)*V*bits(:,ii)) + noise_values(:,ii);
            z(:,ii) = U'*y(:,ii);
        end
        BER1(iii) = numel(find(sign(real(z(1,:)))-bits(1,:)));
        BER2(iii) = numel(find(sign(real(z(2,:)))-bits(2,:)));
        BER3(iii) = numel(find(sign(real(z(3,:)))-bits(3,:)));
    end
    BER1_mean(i) = mean(BER1);
    BER2_mean(i) = mean(BER2);
    BER3_mean(i) = mean(BER3);
    BERavg(i) = (BER1_mean(i)+BER2_mean(i)+BER3_mean(i))/3;
end

figure(1)
grid on
set(gca, 'YScale', 'log')
semilogy(SNRdb,BERavg/Nbits,'o--');

figure(2)
grid on
set(gca, 'YScale', 'log')
semilogy(SNRdb,BER1_mean/Nbits,'o--');
hold on
semilogy(SNRdb,BER2_mean/Nbits,'*--');
semilogy(SNRdb,BER3_mean/Nbits,'x--');
hold off
legend('Eigen Value 1','Eigen Value 2','Eigen Value 3')
toc


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
M=3;
Mr = M;  % No of receive antennas
Mt = M;  % No of transmit antennas
N=100; %No of channel realisations
Hw=1/sqrt(2)*(randn(Mr,Mt,N)+1j*randn(Mr,Mt,N));
Mt_siso = 1;
Mr_siso = 1;
H_siso = Hw(1,1,:);

Nbits = 5*10000;



for i = 1:N
    fronorm_siso(i) = norm(H_siso(:,:,i),"fro").^2;
    H_norm_siso(:,:,i) = H_siso(:,:,i)./sqrt(fronorm_siso(i)/(Mt_siso*Mr_siso));
end

bits_siso = round(rand(1,Nbits));     % bit generation
bits_siso = bits_siso.*2 - 1;   % BPSK modulation

for i = 1:M
    Sigpower(i,1) = (1/3).*sum(bits(i,:).^2)/length(bits(i,:));
end

SNRdb = 0:12;  % 0-12 dB SNR
SNR = 10.^(SNRdb./10);   % Linear SNR

No = Sigpower(1)./SNR;  % Noise variance 

for i = 1:length(No)
    noise_values_siso = randn(1,Nbits).*sqrt(No(i));
    for iii = 1:N
        [U_siso S_siso V_siso] = svd(H_norm_siso(:,:,iii));
        for ii = 1:Nbits
            y_siso(:,ii) = H_norm_siso(:,:,iii)*V_siso*bits_siso(:,ii) + noise_values_siso(:,ii);
            z_siso(:,ii) = U_siso'*y(:,ii);
        end
        BER_siso(iii) = numel(find(sign(real(z_siso(1,:)))-bits_siso(1,:)));
    end
    BER_siso_mean(i) = mean(BER_siso);
    BER_siso_avg(i) = BER_siso_mean(i);
end

figure(3)
set(gca, 'YScale', 'log')
semilogy(SNRdb,BER_siso_avg,'--o')
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

clear all;
clc;
tic
%% Task 1
M=3;
Mr = M;  % No of receive antennas
Mt = M;  % No of transmit antennas
H_I = eye(3);

fronorm_i  = norm(H_I,"fro").^2;

H_I_norm = H_I/sqrt(fronorm_i/(Mt*Mr));

Nbits = 5*10000;   % Number of bits
bits = round(rand(3,Nbits));     % bit generation
bits = bits.*2 - 1;   % BPSK modulation

for i = 1:M
    Sigpower(i,1) = sum(bits(i,:).^2)/length(bits(i,:));
end
SNRdb = 0:12;  % 0-12 dB SNR
SNR = 10.^(SNRdb./10);   % Linear SNR

No = Sigpower(1)./SNR;  % Noise variance 

for i = 1:length(No)
    noise_values(:,:) = randn(3,Nbits).*sqrt(No(i));
    [U S V] = svd(H_I_norm);
    for ii = 1:Nbits            
        y(:,ii) = (1/sqrt(Mt)).*(H_I_norm*V*bits(:,ii)) + noise_values(:,ii);
        z(:,ii) = U'*y(:,ii);
    end
    BER1(i) = numel(find(sign(real(z(1,:)))-bits(1,:)));
    BER2(i) = numel(find(sign(real(z(2,:)))-bits(2,:)));
    BER3(i) = numel(find(sign(real(z(3,:)))-bits(3,:)));
    BERavg(i) = (BER1(i)+BER2(i)+BER3(i))/3;
end

figure(4)
grid on
set(gca, 'YScale', 'log')
semilogy(SNRdb,BERavg/Nbits,'o--');

figure(5)
grid on
set(gca, 'YScale', 'log')
semilogy(SNRdb,BER1/Nbits,'o--');
hold on
semilogy(SNRdb,BER2/Nbits,'*--');
semilogy(SNRdb,BER3/Nbits,'x--');
hold off
legend('Eigen Value 1','Eigen Value 2','Eigen Value 3')
toc
%% Task 3
%. Assume that BPSK is used as modulation. Use the first 2 transmit and first 2 receive elements from the
%MIMO measurement “LOS 8 8.mat”. Assuming uncoded Spatial Multiplexing operation, implement
%the ZF receiver, the MMSE receiver, and the ML receiver, respectively. Simulate the BER for different
%SNRs (e.g., 0-40 dB) and comment on the performances. What is the main drawback of the receiver
%with better performance?


clc;
clear all;
tic;
load('LOS_8_8.mat');

M = 2;
Mt = M;
Mr = M;
Nbits = 50;   % Number of bits




N=100;
H2 = H(1:2,1:2,1:N);
for i=1:N
    fronorm2(i) = norm(H2(1:2,1:2,i),"fro");
    %H_norm = H/sqrt(fronorm(i)/(1.*Mt.*Mr));
end
sum_fronorm2 = sum(fronorm2);
H_norm2 = H2/sqrt(sum_fronorm2/(N.*Mt.*Mr));


bits = round(rand(M,Nbits));     % bit generation
bits = bits.*2 - 1;   % BPSK modulation

for i = 1:M
    Sigpower(i,1) = (1/M).*sum(bits(i,:).^2)/length(bits(i,:));
end
SNRdb = 0:12;  % 0-12 dB SNR
SNR = 10.^(SNRdb./10);   % Linear SNR

No = Sigpower(1)./SNR;  % Noise variance


% ZF reciver!

for i = 1:length(No)
    noise_values(:,:) = randn(M,Nbits).*sqrt(No(i));
    for R = 1:N
        
        for ii = 1:Nbits
            y(:,ii) =(H_norm2(:,:,R)*bits(:,ii)) + noise_values(:,ii);
            z(:,ii) = pinv(H_norm2(:,:,R))*y(:,ii);
            
            
        end
        BER1(R) = numel(find(sign(real(z(1,:)))-bits(1,:)));
        BER2(R) = numel(find(sign(real(z(2,:)))-bits(2,:)));
    end
    BER1_mean(i) = mean(BER1);
    BER2_mean(i) = mean(BER2);
    
    BERavg_ZF(i) = mean(BER1_mean(i)+BER2_mean(i));
    
end


% MMSE
for i = 1:length(No)
    noise_values(:,:) = randn(M,Nbits).*sqrt(No(i));
    for R = 1:N
        for ii = 1:Nbits
            
            G(:,:,ii) = sqrt(Mt)*inv(H_norm2(:,:,R)'*H_norm2(:,:,R)+Mt*No(i).*eye(2))*H_norm2(:,:,R)';
            y(:,ii) =(H_norm2(:,:,R)*bits(:,ii)) + noise_values(:,ii);
            z(:,ii) = G(:,:,R)*y(:,ii);
        end
        BER1(R) = numel(find(sign(real(z(1,:)))-bits(1,:)));
        BER2(R) = numel(find(sign(real(z(2,:)))-bits(2,:)));
    end
    
    BER1_mean(i) = mean(BER1);
    BER2_mean(i) = mean(BER2);
    
    BERavg_MMSE(i) = mean(BER1_mean(i)+BER2_mean(i));
    
end


 %ML
for i = 1:length(No)
    noise_values(:,:) = randn(M,Nbits).*sqrt(No(i));
    for R = 1:N
        for ii = 1:Nbits
            
            y(:,ii) =(sqrt(1/Mt)*H_norm2(:,:,R)*bits(:,ii)) + noise_values(:,ii);
            s_line = y(:,ii) - sqrt(1/Mt)*H_norm2(:,:,R)*[1;-1];
            
            s_line_norm = norm(s_line,'fro');
            s_hat(ii) = min(s_line_norm);
            
        end
    end
    
end

